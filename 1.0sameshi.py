import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log")
    ]
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    waiting_for_files = State()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
import os
TOKEN = os.getenv("TOKEN")
ADMIN_ID = 739361473 # 796381516

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
current_mailing = {
    "date": "04.08.2025",
    "files": [],
    "text": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ: https://drive.google.com/drive/folders/1-srO5whhr4KfEMRej111by9qcs37HbOI?usp=sharing",
    "channels": [
        {"id": -1002895938397, "name": "@studywithmiro"},
        {"id": -1002542163897, "name": "@miroholst"},
        {"id": -1001832702236, "name": "@mamasbooks"},
        {"id": -1002386014261, "name": "@russianlanguageandgeography"},
        {"id": -1002861287275, "name": "@lazvik_repet"},
        {"id": -1002204291357, "name": "@mirocreativonline"},
        {"id": -1002549199780, "name": "@proyazyk1"},
        
        # {"id": -1002631054307, "name": "@zxcmabot"},
    ],
    "user_ids": set()
}

bot = Bot(token=TOKEN)
dp = Dispatcher()

async def check_subscription(user_id: int) -> tuple[bool, list[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂:
    - True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –∏–Ω–∞—á–µ False
    - –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    """
    unsubscribed_channels = []
    
    for channel in current_mailing["channels"]:
        try:
            member = await bot.get_chat_member(chat_id=channel["id"], user_id=user_id)
            if member.status not in ["member", "administrator", "creator"]:
                unsubscribed_channels.append(channel["name"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel['name']}: {e}")
            unsubscribed_channels.append(channel["name"])
    
    return (not unsubscribed_channels, unsubscribed_channels)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    current_mailing["user_ids"].add(message.from_user.id)
    is_subscribed, missing_channels = await check_subscription(message.from_user.id)
    
    if is_subscribed:
        await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã! –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É.")
    else:
        channels_list = "\n".join([f"‚Ä¢ {name}" for name in missing_channels])
        await message.answer(
            f"üì¢ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n"
            f"{channels_list}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )

@dp.message(Command("mailing"))
async def cmd_mailing(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
    
    await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    asyncio.create_task(send_mailing())

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
    
    await state.clear()
    buttons = [
        [InlineKeyboardButton(text="üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="send_mailing")],
        [InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data="change_date")],
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="change_text")],
        [InlineKeyboardButton(text="üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã", callback_data="add_files")]
    ]
    
    info = (
        f"üìÖ –î–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {current_mailing['date']}\n"
        f"üìù –¢–µ–∫—Å—Ç: {current_mailing['text'][:100]}...\n"
        f"üìé –§–∞–π–ª–æ–≤: {len(current_mailing['files'])}\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(current_mailing['user_ids'])}"
    )
    
    await message.answer(
        f"‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n{info}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )

@dp.callback_query(F.data == "change_date")
async def change_date(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state("waiting_for_date")
    await callback.answer()

@dp.message(F.state == "waiting_for_date", F.text.regexp(r'^\d{2}\.\d{2}\.\d{4}$'))
async def handle_date(message: types.Message, state: FSMContext):
    current_mailing["date"] = message.text
    await state.clear()
    await message.answer(f"üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {message.text}")
    await cmd_admin(message, state)

@dp.callback_query(F.data == "change_text")
async def change_text(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state("waiting_for_text")
    await callback.answer()

@dp.message(F.state == "waiting_for_text")
async def handle_text(message: types.Message, state: FSMContext):
    current_mailing["text"] = message.text
    await state.clear()
    await message.answer("üìù –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await cmd_admin(message, state)

@dp.callback_query(F.data == "add_files")
async def add_files_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ).\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
    )
    await state.set_state(Form.waiting_for_files)
    await callback.answer()

@dp.message(F.from_user.id == ADMIN_ID, Form.waiting_for_files, F.document | F.photo | F.video)
async def handle_files(message: types.Message):
    file_id = None
    if message.document:
        file_id = message.document.file_id
    elif message.photo:
        file_id = message.photo[-1].file_id
    elif message.video:
        file_id = message.video.file_id
    
    if file_id:
        current_mailing["files"].append(file_id)
        await message.answer(f"üìé –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –í—Å–µ–≥–æ: {len(current_mailing['files'])}")

@dp.callback_query(F.data == "send_mailing")
async def send_mailing_handler(callback: types.CallbackQuery):
    await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...")
    asyncio.create_task(send_mailing())

async def send_mailing():
    try:
        success = failed = 0
        total = len(current_mailing["user_ids"])
        logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        for user_id in list(current_mailing["user_ids"]):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º list –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                is_subscribed, _ = await check_subscription(user_id)
                if is_subscribed:
                    await bot.send_message(user_id, current_mailing["text"])
                    for file_id in current_mailing["files"]:
                        await bot.send_document(user_id, file_id)
                        await asyncio.sleep(0.3)
                    success += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}: {e}")
                failed += 1
        
        report = (
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üë• –í—Å–µ–≥–æ: {total}\n"
            f"‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"‚úñÔ∏è –û—à–∏–±–∫–∏: {failed}"
        )
        await bot.send_message(ADMIN_ID, report)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await bot.send_message(ADMIN_ID, f"‚õî –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

async def schedule_checker():
    while True:
        try:
            now = datetime.now().strftime("%d.%m.%Y")
            if now == current_mailing["date"]:
                await send_mailing()
                current_mailing["date"] = "31.12.2099"
            await asyncio.sleep(3600)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ schedule_checker: {e}")
            await asyncio.sleep(60)

async def main():
    asyncio.create_task(schedule_checker())
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
